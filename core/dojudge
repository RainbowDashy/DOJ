#!/usr/bin/env python
#coding: utf-8

import MySQLdb, json, sys, os, lorun, re

f_succ = "\033[1;32m * \033[0m" #Green
f_warn = "\033[1;33m * \033[0m" #Yellow
f_fail = "\033[1;31m * \033[0m" #Red

host, name, user, pwd = [''] * 4
res_map = [1, 8, 3, 4, 2, 5, 7, 6, 8]

def setConfig():
	global host, name, user, pwd
	try:
		config = file('db.conf', 'r')
		conf = json.loads(config.read())
		host = conf['db_host']
		name = conf['db_name']
		user = conf['db_user']
		pwd = conf['db_pwd']
		config.close()
	except:
		sys.stderr.write('%sWrong: cannot read config file\n' % f_fail)
		sys.exit(1)

def getSubmitMsg(rid):
	global host, name, user, pwd
	try:
		conn = MySQLdb.connect(host=host, user=user, passwd=pwd, db=name)
		doj = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
		doj.execute('SELECT * FROM submit WHERE id = %d' % rid)
		res = doj.fetchoneDict()
		if not res:
			sys.stderr.write('%sNot a correct runid !\n' % f_fail)
			sys.exit(1)
#		if res['res'] == 9:
#			sys.stdout.write('%sAnother judger is judging !\n' % f_warn)
#			sys.exit(2)
		doj.execute('UPDATE submit SET res = 9 WHERE id = %d' % rid)
		conn.commit()
		doj.close()
		conn.close()
	except MySQLdb.Error, e:
		sys.stderr.write("Mysql Error %d: %s\n" % (e.args[0], e.args[1]))
		sys.exit(1)
	return res

def getProblemMsg(pid):
	global host, name, user, pwd
	try:
		conn = MySQLdb.connect(host=host, user=user, passwd=pwd, db=name)
		doj = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
		doj.execute('SELECT * FROM problems WHERE id = %d' % pid)
		res = doj.fetchoneDict()
		if not res:
			sys.stderr.write('%sCannot read get the problem !\n' % f_fail)
			sys.exit(1)
		doj.close()
		conn.close()
	except MySQLdb.Error, e:
		sys.stderr.write("Mysql Error %d: %s\n" % (e.args[0], e.args[1]))
		sys.exit(1)
	return res

def updateRes(rid, flag, res):
	global host, name, user, pwd
	try:
		conn = MySQLdb.connect(host=host, user=user, passwd=pwd, db=name)
		doj = conn.cursor()
		doj.execute('UPDATE submit SET res = %d, result = \'%s\' WHERE id = %d' % (flag, res, rid))
		conn.commit()
		doj.close()
		conn.close()
	except MySQLdb.Error, e:
		sys.stderr.write("Mysql Error %d: %s\n" % (e.args[0], e.args[1]))
		sys.exit(1)

def run(conf, fin, fout, calls, files):
	fi = file(fin)
	fo = file(fout, 'w')
	conf['fd_in'] = fi.fileno()
	conf['fd_out'] = fo.fileno()
	conf['calls'] = calls
	conf['files'] = files
	r = lorun.run(conf)
	fi.close()
	fo.close()
	return r

def ansCmp(fout, fans):
	fo = file(fout, 'r')
	fa = file(fans, 'r')
	while True:
		al = fa.readline()
		ol = fo.readline()
		if al == '' and ol == '':
			break
		if al.rstrip() != ol.rstrip():
			fo.close()
			fa.close()
			return 2 #WA
	fo.close()
	fa.close()
	return 1 #AC

if __name__ == '__main__':
	if len(sys.argv) == 1:
		sys.stderr.write('%sRun ID is required !\n' % f_fail)
		sys.exit(1)
	rid = int(sys.argv[1])
	if len(sys.argv) > 2 and sys.argv[2] == 'config':
		conf_lan = True
	else:
		conf_lan = False

	os.chdir('/home/doj')
	setConfig()
	sub = getSubmitMsg(rid)
	pro = getProblemMsg(sub['pid'])

	if os.path.exists(str(pro['id'])):
		os.chdir(str(pro['id']))
	else:
		sys.stderr.write('%sCannot find data dir !\n' % f_fail)
		sys.exit(1)

	try:
		lan_conf = file('../%d.conf' % sub['language'], 'r')
		conf_lines = lan_conf.readlines()
		lan_conf.close()
		lan_subfix = conf_lines[0].strip()
		lan_comp = conf_lines[1].strip()
		lan_run = conf_lines[2].strip()

		source = '%d.%s' % (rid, lan_subfix)
		code = file(source, 'w')
		code.write(sub['code'])
		code.close()

		if sub['language'] < 2:
			lan_comp_cmd = lan_comp % (source, rid)
		else:
			lan_comp_cmd = lan_comp % source

		from subprocess import Popen, PIPE
		comp = Popen(lan_comp_cmd.split(' '), stdout = PIPE, stderr = PIPE)
		comp_return = comp.wait()
		if comp_return != 0:
			re_out, re_err = comp.communicate()
			re_msg = list(re_out + re_err)
			re_msg_len = len(re_msg)
			for i in range(0, re_msg_len):
				if ord(re_msg[i]) > 127:
					re_msg[i] = ''
			re_msg = ''.join(re_msg)
			updateRes(sub['id'], 6, re_msg)
			os.remove(source)
			sys.exit(0)
		os.remove(source)

		trace_calls = []
		trace_files = {}
		if not conf_lan:
			trace_calls = conf_lines[3].strip().split(' ')
			for i in conf_lines:
				if not re.match('\S+ \d+\n', i):
					continue
				key, val = i.strip().split(' ')
				trace_files[key] = int(val)
		trace_calls = [ int(x) for x in trace_calls ]
	except Exception, e:
		sys.stderr.write('%sWrong language config file, please reconfig !\n' % f_fail)
		sys.exit(1)

	run_conf = {
		'args': (lan_run % rid).split(' '),
		'timelimit': pro['time'], #ms
		'memorylimit': pro['memory'], #KB
		'trace': True
	}

	if conf_lan:
		while True:
			fi = '0.in'
			ft = 'temp.out'
			res = run(run_conf, fi, ft, trace_calls, trace_files)
			if res['result'] == 0:
				break
			else:
				if res.has_key('re_call'):
					trace_calls.append(res['re_call'])
				elif res.has_key('re_file'):
					trace_files[res['re_file']] = res['re_file_flag']
				else:
					break
		
		lan_conf = file('../%d.conf' % sub['language'], 'w')
		lan_conf.write(lan_subfix + '\n')
		lan_conf.write(lan_comp + '\n')
		lan_conf.write(lan_run + '\n')
		t_calls = [ str(x) for x in sorted(trace_calls) ]
		lan_conf.write(' '.join(t_calls) + '\n')
		for key in trace_files:
			lan_conf.write('%s %s\n' % (key, trace_files[key]))
		lan_conf.close()

	if os.path.exists('temp.out'):
		os.remove('temp.out')

	i = 0
	res = 1
	result = []
	while os.path.exists('%d.in' % i):
		fin = '%d.in' % i
		fans = '%d.out' % i
		fout = '%d_temp.out' % rid
		r = run(run_conf, fin, fout, trace_calls, trace_files)

		while sub['language'] >= 3 and r['result'] == 5 and r.has_key('re_file'):
			trace_files[r['re_file']] = r['re_file_flag']
			r = run(run_conf, fin, fout, trace_calls, trace_files)

		if r['result'] == 0:
			sres = ansCmp(fout, fans)
		else:
			sres = res_map[r['result']]
		if sres != 1 and res == 1:
			res = sres
		result.append({
			'res': sres,
			'time': r['timeused'],
			'memory': r['memoryused']
		})
		print '#%d:' % i, result[-1]
		os.remove(fout)
		i = i + 1

	if os.path.exists('%d' %rid):
		os.remove('%d' %rid)
	else:
		os.remove('%d.pyo' % rid)

	str_result = json.dumps(result)
	updateRes(sub['id'], res, str_result)
